version: "3.9"

services:
  nginx:
    build: ./docker_env/nginx
    container_name: ${PROJECT_NAME}-nginx
    ports:
        - "${WEB_PORT}:8080"
    expose:
        - "8080"
    volumes:
        - ./web/dict:/usr/share/nginx/html
        - ./compose/nginx/ssl:/usr/share/nginx/ssl
        - ./compose/nginx/log:/var/log/nginx
    restart: always
    networks:
        - network

  backend:
    build:
      context: .
      dockerfile: ./docker_env/django/Dockerfile
    container_name: ${PROJECT_NAME}-backend
    depends_on:
      - mysql
    environment:
      ARGILLA_API_URL: http://127.0.0.1:6900/
      PYTHONUNBUFFERED: 1
      DATABASE_HOST: mysql
      TZ: Asia/Shanghai
    volumes:
      - ./backend:/app
      - ./logs/log:/var/log
    ports:
      - "8000:8000"
    expose:
      - "8000"
    restart: always
    networks:
      - network

  mysql:
    image: mysql
    container_name: ${PROJECT_NAME}-mysql
    privileged: true
    restart: always
    expose:
      - "3306"
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      - "MYSQL_ROOT_PASSWORD:${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_DATABASE:${MYSQL_DATABASE}"
      - "TZ: Asia/Shanghai"
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --wait_timeout=31536000
      --interactive_timeout=31536000
      --max_connections=1000
      --default-authentication-plugin=mysql_native_password
    volumes:
      - "./docker_env/mysql/data:/var/lib/mysql"
      - "./docker_env/mysql/conf.d:/etc/mysql/conf.d"
      - "./docker_env/mysql/logs:/logs"
    networks:
      - network


# 如果使用celery 插件，请自行打开此注释
#  dvadmin-celery:
#    build:
#      context: .
#      dockerfile: ./docker_env/celery/Dockerfile
#    # image: django:2.2
#    container_name: dvadmin-celery
#    working_dir: /backend
#    depends_on:
#      - dvadmin-mysql
#    environment:
#      PYTHONUNBUFFERED: 1
#      DATABASE_HOST: dvadmin-mysql
#      TZ: Asia/Shanghai
#    volumes:
#      - ./backend:/backend
#      - ./logs/log:/var/log
#    restart: always
#    networks:
#      network:
#        ipv4_address: 177.8.0.14


# dvadmin-redis:
#   image: redis:6.2.6-alpine # 指定服务镜像，最好是与之前下载的redis配置文件保持一致
#   container_name: dvadmin-redis # 容器名称
#   restart: on-failure # 重启方式
#   environment:
#     - TZ=Asia/Shanghai # 设置时区
#   volumes: # 配置数据卷
#     - ./docker_env/redis/data:/data
#     - ./docker_env/redis/redis.conf:/etc/redis/redis.conf
#   ports: # 映射端口
#     - "6379:6379"
#   sysctls: # 设置容器中的内核参数
#     - net.core.somaxconn=1024
#   command: /bin/sh -c "echo 'vm.overcommit_memory = 1' >> /etc/sysctl.conf && redis-server /etc/redis/redis.conf --appendonly yes" # 指定配置文件并开启持久化
#   privileged: true # 使用该参数，container内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限
#   networks:
#     network:
#       ipv4_address: 177.8.0.15

  argilla:
    image: argilla/argilla-server:latest
    restart: unless-stopped
    ports:
      - "6900:6900"
    environment:
      ARGILLA_HOME_PATH: /var/lib/argilla
      ARGILLA_ELASTICSEARCH: http://elasticsearch:9200
      DEFAULT_USER_ENABLED: true # Uncomment this line to disable the creation of the default user
      # DEFAULT_USER_PASSWORD: P@ssw0rd123456 # Uncomment this line to set a custom password for the default user
      # DEFAULT_USER_API_KEY: custom-api-key # Uncomment this line to set a custom api-key for the default user
    networks:
      - network
    # volumes:
    #   - argilladata:/var/lib/argilla
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
    environment:
      - node.name=elasticsearch
      - cluster.name=es-argilla-local
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - network
    ports:
      - "9200:9200"
      - "9300:9300"
    # volumes:
    #   - elasticdata:/usr/share/elasticsearch/data/
  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.3
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - network

networks:
  network:
    driver: bridge

